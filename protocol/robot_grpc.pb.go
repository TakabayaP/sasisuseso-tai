// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: robot.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RobotClient is the client API for Robot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RobotClient interface {
	Turn(ctx context.Context, in *TurnRequest, opts ...grpc.CallOption) (*TurnResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	SetPin(ctx context.Context, in *SetPinRequest, opts ...grpc.CallOption) (*SetPinResponse, error)
}

type robotClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotClient(cc grpc.ClientConnInterface) RobotClient {
	return &robotClient{cc}
}

func (c *robotClient) Turn(ctx context.Context, in *TurnRequest, opts ...grpc.CallOption) (*TurnResponse, error) {
	out := new(TurnResponse)
	err := c.cc.Invoke(ctx, "/robot.Robot/Turn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/robot.Robot/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClient) SetPin(ctx context.Context, in *SetPinRequest, opts ...grpc.CallOption) (*SetPinResponse, error) {
	out := new(SetPinResponse)
	err := c.cc.Invoke(ctx, "/robot.Robot/SetPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotServer is the server API for Robot service.
// All implementations must embed UnimplementedRobotServer
// for forward compatibility
type RobotServer interface {
	Turn(context.Context, *TurnRequest) (*TurnResponse, error)
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	SetPin(context.Context, *SetPinRequest) (*SetPinResponse, error)
	mustEmbedUnimplementedRobotServer()
}

// UnimplementedRobotServer must be embedded to have forward compatible implementations.
type UnimplementedRobotServer struct {
}

func (UnimplementedRobotServer) Turn(context.Context, *TurnRequest) (*TurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Turn not implemented")
}
func (UnimplementedRobotServer) Move(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedRobotServer) SetPin(context.Context, *SetPinRequest) (*SetPinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPin not implemented")
}
func (UnimplementedRobotServer) mustEmbedUnimplementedRobotServer() {}

// UnsafeRobotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotServer will
// result in compilation errors.
type UnsafeRobotServer interface {
	mustEmbedUnimplementedRobotServer()
}

func RegisterRobotServer(s grpc.ServiceRegistrar, srv RobotServer) {
	s.RegisterService(&Robot_ServiceDesc, srv)
}

func _Robot_Turn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).Turn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.Robot/Turn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).Turn(ctx, req.(*TurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robot_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.Robot/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robot_SetPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).SetPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robot.Robot/SetPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).SetPin(ctx, req.(*SetPinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Robot_ServiceDesc is the grpc.ServiceDesc for Robot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Robot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "robot.Robot",
	HandlerType: (*RobotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Turn",
			Handler:    _Robot_Turn_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Robot_Move_Handler,
		},
		{
			MethodName: "SetPin",
			Handler:    _Robot_SetPin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "robot.proto",
}
